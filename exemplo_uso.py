#!/usr/bin/env python3
"""
Exemplo de uso do GodOfPrompt Scraper
Este arquivo demonstra como usar o scraper de forma program√°tica
"""

import json
from extract_links import extract_category_links, load_categories

def exemplo_extracao_basica():
    """Exemplo b√°sico de extra√ß√£o de uma categoria"""
    print("üöÄ Exemplo: Extra√ß√£o B√°sica")
    print("=" * 50)

    # Carregar categorias
    categories = load_categories()
    print(f"Categorias dispon√≠veis: {[cat['nome'] for cat in categories]}")

    # Escolher primeira categoria
    categoria = categories[0]
    print(f"\nSelecionada: {categoria['nome']}")
    print(f"URL: {categoria['link']}")
    print(f"Prompts esperados: {categoria['quantidadeDePrompts']}")

    # Extrair links (removido para demonstra√ß√£o)
    # prompts = extract_category_links(categoria)

    print("\nPara executar a extra√ß√£o real:")
    print(f"python3 extract_links.py --test \"{categoria['nome']}\"")

def exemplo_analise_resultados():
    """Exemplo de an√°lise dos resultados extra√≠dos"""
    print("\nüìä Exemplo: An√°lise de Resultados")
    print("=" * 50)

    # Simula√ß√£o de dados extra√≠dos
    exemplo_dados = {
        "Vendas": {
            "quantidade_esperada": 252,
            "quantidade_extraida": 245,
            "prompts": [
                {
                    "url": "https://www.godofprompt.ai/prompt?prompt=sales-script",
                    "name": "Sales Script Generator",
                    "id": "sales-script",
                    "category": "sales"
                },
                {
                    "url": "https://www.godofprompt.ai/prompt?prompt=cold-email",
                    "name": "Cold Email Template",
                    "id": "cold-email",
                    "category": "sales"
                }
            ]
        }
    }

    # An√°lise b√°sica
    categoria = "Vendas"
    dados = exemplo_dados[categoria]

    print(f"Categoria: {categoria}")
    print(f"Esperado: {dados['quantidade_esperada']}")
    print(f"Extra√≠do: {dados['quantidade_extraida']}")
    print(f"Taxa de sucesso: {(dados['quantidade_extraida'] / dados['quantidade_esperada']) * 100:.1f}%")
    print(f"Primeiros prompts encontrados:")
    for i, prompt in enumerate(dados['prompts'][:3], 1):
        print(f"  {i}. {prompt['name']}")
        print(f"     URL: {prompt['url']}")

def exemplo_configuracao_personalizada():
    """Exemplo de configura√ß√£o personalizada"""
    print("\n‚öôÔ∏è  Exemplo: Configura√ß√£o Personalizada")
    print("=" * 50)

    # Configura√ß√µes poss√≠veis
    config = {
        "max_workers": 3,  # Workers para processamento concorrente
        "page_timeout": 30,  # Timeout em segundos
        "max_pages_per_category": 50,  # M√°ximo de p√°ginas por categoria
        "request_delay": 2,  # Delay entre requests
        "output_format": "json",  # Formato de sa√≠da
        "enable_logging": True,  # Habilitar logging detalhado
        "enable_cache": True,  # Habilitar cache de requests
    }

    print("Configura√ß√µes recomendadas:")
    for key, value in config.items():
        print(f"  {key}: {value}")

    print("\nPara modificar essas configura√ß√µes, edite o arquivo extract_links.py")

def exemplo_tratamento_erros():
    """Exemplo de tratamento de erros"""
    print("\nüõ°Ô∏è  Exemplo: Tratamento de Erros")
    print("=" * 50)

    print("Cen√°rios comuns de erro e solu√ß√µes:")
    print()
    print("1. Timeout na p√°gina:")
    print("   - Aumentar PAGE_LOAD_TIMEOUT no c√≥digo")
    print("   - Verificar conex√£o com internet")
    print()
    print("2. Elemento n√£o encontrado:")
    print("   - Verificar se o seletor Wized mudou")
    print("   - Atualizar seletores no c√≥digo")
    print()
    print("3. Mem√≥ria insuficiente:")
    print("   - Reduzir BATCH_SIZE")
    print("   - Processar em lotes menores")
    print()
    print("4. ChromeDriver issues:")
    print("   - Atualizar Chrome browser")
    print("   - pip install webdriver-manager")
    print()
    print("5. Anti-bot detection:")
    print("   - Aumentar delays entre a√ß√µes")
    print("   - Usar user-agents diferentes")

def main():
    """Fun√ß√£o principal do exemplo"""
    print("üéØ GodOfPrompt Scraper - Exemplos de Uso")
    print("=" * 60)

    exemplo_extracao_basica()
    exemplo_analise_resultados()
    exemplo_configuracao_personalizada()
    exemplo_tratamento_erros()

    print("\n" + "=" * 60)
    print("‚ú® Dicas Finais:")
    print("‚Ä¢ Sempre teste com --test antes da extra√ß√£o completa")
    print("‚Ä¢ Monitore os logs em extraction_log.txt")
    print("‚Ä¢ Use ambiente virtual para isolamento")
    print("‚Ä¢ Respeite os termos de servi√ßo do GodOfPrompt.ai")
    print("‚Ä¢ Fa√ßa backups dos dados extra√≠dos")

if __name__ == "__main__":
    main()
